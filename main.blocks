<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="ww{8AlQ3h}L.=8*@XC!r">question</variable></variables><block type="pxt-on-start" id="/*#;d7gT?Ego$gBY[;.v" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="2)-k|eIi%8$lbmirR(y5" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class PlanetDetection {" line1="    constructor() {" line2="        " line3="    }" line4="    " line5="    public detect_planet(): string {" line6="        /** Method to detect a planet." line7="" line8="        Returns:" line9="        str: The detected planet name." line10="        " line11=" */" line12="        //  Code to detect which planet is placed on the sensor" line13="        return &quot;&quot;" line14="    }" line15="    " line16="}" numlines="17"></mutation><next><block type="typescript_statement" id="S_kR1eK-MuVE8md~LEEd" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class AudioVisual {" line1="    constructor() {" line2="        " line3="    }" line4="    " line5="    public display_success(planet: string) {" line6="        /** Method to display a success message." line7="" line8="        Args:" line9="        planet (str): The planet name in the success message." line10="        " line11=" */" line12="        //  Code to display success message on LED and play correct sound" line13="        I2C_LCD1602.ShowString(&quot;Correct!&quot;, 0, 0)" line14="    }" line15="    " line16="    public display_failure(planet: string) {" line17="        /** Method to display a failure message." line18="" line19="        Args:" line20="        planet (str): The planet name in the failure message." line21="        " line22=" */" line23="        //  Code to display failure message on LED" line24="        I2C_LCD1602.ShowString(&quot;Incorrect...&quot;, 0, 0)" line25="        I2C_LCD1602.ShowString(&quot;Try again.&quot;, 0, 1)" line26="    }" line27="    " line28="    public display_lesson_complete(message: string) {" line29="        /** Method to display a lesson complete message." line30="" line31="        Args:" line32="        message (str): The message to be displayed." line33="        " line34=" */" line35="        I2C_LCD1602.ShowString(&quot;Lesson complete!&quot;, 0, 1)" line36="    }" line37="    " line38="    public play_success_sound() {" line39="        /** Method to play success sound. */" line40="        //  Code to play the specified sound" line41="        music.tonePlayable(Note.C, music.beat(BeatFraction.Whole))" line42="    }" line43="    " line44="    public play_fail_sound() {" line45="        /** Method to play fail sound. */" line46="        //  Code to play the specified sound" line47="        " line48="    }" line49="    " line50="    public play_rotation_sound() {" line51="        /** Method to play rotation sound. */" line52="        //  Star Wars" line53="        music.play(music.tonePlayable(392, music.beat(BeatFraction.Half)), music.PlaybackMode.UntilDone)" line54="        music.play(music.tonePlayable(587, music.beat(BeatFraction.Half)), music.PlaybackMode.UntilDone)" line55="        music.play(music.tonePlayable(523, music.beat(BeatFraction.Quarter)), music.PlaybackMode.UntilDone)" line56="        music.play(music.tonePlayable(494, music.beat(BeatFraction.Quarter)), music.PlaybackMode.UntilDone)" line57="        music.play(music.tonePlayable(440, music.beat(BeatFraction.Quarter)), music.PlaybackMode.UntilDone)" line58="        music.play(music.tonePlayable(784, music.beat(BeatFraction.Half)), music.PlaybackMode.UntilDone)" line59="        music.play(music.tonePlayable(587, music.beat(BeatFraction.Quarter)), music.PlaybackMode.UntilDone)" line60="        music.play(music.tonePlayable(523, music.beat(BeatFraction.Quarter)), music.PlaybackMode.UntilDone)" line61="        music.play(music.tonePlayable(494, music.beat(BeatFraction.Quarter)), music.PlaybackMode.UntilDone)" line62="        music.play(music.tonePlayable(440, music.beat(BeatFraction.Quarter)), music.PlaybackMode.UntilDone)" line63="        music.play(music.tonePlayable(784, music.beat(BeatFraction.Half)), music.PlaybackMode.UntilDone)" line64="        music.play(music.tonePlayable(587, music.beat(BeatFraction.Quarter)), music.PlaybackMode.UntilDone)" line65="        music.play(music.tonePlayable(523, music.beat(BeatFraction.Quarter)), music.PlaybackMode.UntilDone)" line66="        music.play(music.tonePlayable(494, music.beat(BeatFraction.Quarter)), music.PlaybackMode.UntilDone)" line67="        music.play(music.tonePlayable(523, music.beat(BeatFraction.Quarter)), music.PlaybackMode.UntilDone)" line68="        music.play(music.tonePlayable(440, music.beat(BeatFraction.Half)), music.PlaybackMode.UntilDone)" line69="        //  Code to play the specified sound" line70="        " line71="    }" line72="    " line73="    public stop_rotation_sound() {" line74="        /** Method to stop rotation sound. */" line75="        //  Code to stop the specified sound" line76="        " line77="    }" line78="    " line79="    public play_lesson_complete_sound(txt: any, aChar: any) {" line80="        /** Method to play lesson complete sound. */" line81="        //  Code to play the specified sound" line82="        " line83="    }" line84="    " line85="    public myrfind(txt: string, aChar: string): number {" line86="        for (let i = txt.length - 1; i &gt; -1; i += -1) {" line87="            if (txt[i] == aChar) {" line88="                return i" line89="            }" line90="            " line91="        }" line92="        return -1" line93="    }" line94="    " line95="    public display_question(question: string) {" line96="        let row: number;" line97="        /** Method to display the question." line98="" line99="        Args:" line100="        question (str): The question to be displayed." line101="        " line102=" */" line103="        let pd = new PlanetDetection()" line104="        let oldlastindex = 0" line105="        let lastindex = 0" line106="        let lastcompare = 0" line107="        let j = 0" line108="        //  display = True" line109="        let done = false" line110="        let line = &quot;&quot;" line111="        let lines = []" line112="        //  # # serial.write_line(str(len(question)-1))" line113="        while (lastindex &lt; question.length - 1) {" line114="            lastcompare = 16 + lastindex" line115="            //  # serial.write_line(str(lastcompare))" line116="            if (question.length - 1 &lt; lastcompare) {" line117="                lastcompare = question.length - 1" line118="                done = true" line119="            }" line120="            " line121="            //  serial.write_line(&quot;Done is true.&quot;)" line122="            if (question[lastcompare] != &quot; &quot;) {" line123="                //  x = 1" line124="                //  self.myrfind(&quot;a&quot;, &quot;b&quot;)" line125="                lastindex = this.myrfind(question.slice(oldlastindex, lastcompare), &quot; &quot;) + oldlastindex" line126="            } else {" line127="                //  serial.write_line(str(lastindex))" line128="                lastindex = lastcompare" line129="            }" line130="            " line131="            if (lastcompare &gt;= question.length - 1) {" line132="                lastindex = question.length" line133="            }" line134="            " line135="            line = question.slice(oldlastindex, lastindex)" line136="            oldlastindex = lastindex" line137="            j += 1" line138="            //  serial.write_line(line)" line139="            lines.push(line)" line140="            if (done) {" line141="                break" line142="            }" line143="            " line144="        }" line145="        let k = 0" line146="        while (pd.detect_planet() != &quot;&quot;) {" line147="            if (k &gt; 1 &amp;&amp; k % 2 == 0) {" line148="                basic.pause(3000)" line149="                I2C_LCD1602.clear()" line150="            }" line151="            " line152="            row = k % 2" line153="            I2C_LCD1602.ShowString(lines[k], 0, row)" line154="            k += 1" line155="            if (k &gt;= lines.length) {" line156="                basic.pause(3000)" line157="                I2C_LCD1602.clear()" line158="                k = 0" line159="            }" line160="            " line161="        }" line162="    }" line163="    " line164="}" numlines="165"></mutation><next><block type="I2C_LCD1620_SET_ADDRESS" id="xKleM^fhm(e.B%a3`1_h"><comment pinned="false" h="80" w="160"># ALL MAIN CODE HERE ##</comment><value name="addr"><shadow type="math_number" id="ZEBliyi`+;tQs+,%gwUR"><field name="NUM">39</field></shadow></value><next><block type="typescript_statement" id="NpxoicUh!YRNi{aH]Kf}" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let av = new AudioVisual()" numlines="1" declaredvars="av"></mutation><next><block type="variables_set" id="BCXNesB7-WTMz|SVl+C8"><field name="VAR" id="ww{8AlQ3h}L.=8*@XC!r">question</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="text" id=")eK!o(}{pUKbv~s2CAS("><field name="TEXT">What planet is closest to the sun my guy huh answer me bruh come on why don't you be cool and stuff????</field></block></value><next><block type="typescript_statement" id="Fgb`ZVs@L~Z`%3+K_3Ns" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="av.display_question(question)" numlines="1"></mutation></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>